// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: pb/krk-stops.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KrkStops_GetAirly_FullMethodName                     = "/KrkStops/GetAirly"
	KrkStops_FindNearestAirlyInstallation_FullMethodName = "/KrkStops/FindNearestAirlyInstallation"
	KrkStops_GetAirlyInstallation_FullMethodName         = "/KrkStops/GetAirlyInstallation"
	KrkStops_GetDepartures2_FullMethodName               = "/KrkStops/GetDepartures2"
	KrkStops_SearchStops2_FullMethodName                 = "/KrkStops/SearchStops2"
)

// KrkStopsClient is the client API for KrkStops service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KrkStopsClient interface {
	GetAirly(ctx context.Context, in *GetMeasurementRequest, opts ...grpc.CallOption) (*Measurement, error)
	FindNearestAirlyInstallation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Installation, error)
	GetAirlyInstallation(ctx context.Context, in *GetAirlyInstallationRequest, opts ...grpc.CallOption) (*Installation, error)
	GetDepartures2(ctx context.Context, in *GetDepartures2Request, opts ...grpc.CallOption) (*GetDepartures2Response, error)
	SearchStops2(ctx context.Context, in *SearchStops2Request, opts ...grpc.CallOption) (*SearchStops2Response, error)
}

type krkStopsClient struct {
	cc grpc.ClientConnInterface
}

func NewKrkStopsClient(cc grpc.ClientConnInterface) KrkStopsClient {
	return &krkStopsClient{cc}
}

func (c *krkStopsClient) GetAirly(ctx context.Context, in *GetMeasurementRequest, opts ...grpc.CallOption) (*Measurement, error) {
	out := new(Measurement)
	err := c.cc.Invoke(ctx, KrkStops_GetAirly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *krkStopsClient) FindNearestAirlyInstallation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Installation, error) {
	out := new(Installation)
	err := c.cc.Invoke(ctx, KrkStops_FindNearestAirlyInstallation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *krkStopsClient) GetAirlyInstallation(ctx context.Context, in *GetAirlyInstallationRequest, opts ...grpc.CallOption) (*Installation, error) {
	out := new(Installation)
	err := c.cc.Invoke(ctx, KrkStops_GetAirlyInstallation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *krkStopsClient) GetDepartures2(ctx context.Context, in *GetDepartures2Request, opts ...grpc.CallOption) (*GetDepartures2Response, error) {
	out := new(GetDepartures2Response)
	err := c.cc.Invoke(ctx, KrkStops_GetDepartures2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *krkStopsClient) SearchStops2(ctx context.Context, in *SearchStops2Request, opts ...grpc.CallOption) (*SearchStops2Response, error) {
	out := new(SearchStops2Response)
	err := c.cc.Invoke(ctx, KrkStops_SearchStops2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KrkStopsServer is the server API for KrkStops service.
// All implementations must embed UnimplementedKrkStopsServer
// for forward compatibility
type KrkStopsServer interface {
	GetAirly(context.Context, *GetMeasurementRequest) (*Measurement, error)
	FindNearestAirlyInstallation(context.Context, *Location) (*Installation, error)
	GetAirlyInstallation(context.Context, *GetAirlyInstallationRequest) (*Installation, error)
	GetDepartures2(context.Context, *GetDepartures2Request) (*GetDepartures2Response, error)
	SearchStops2(context.Context, *SearchStops2Request) (*SearchStops2Response, error)
	mustEmbedUnimplementedKrkStopsServer()
}

// UnimplementedKrkStopsServer must be embedded to have forward compatible implementations.
type UnimplementedKrkStopsServer struct {
}

func (UnimplementedKrkStopsServer) GetAirly(context.Context, *GetMeasurementRequest) (*Measurement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirly not implemented")
}
func (UnimplementedKrkStopsServer) FindNearestAirlyInstallation(context.Context, *Location) (*Installation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNearestAirlyInstallation not implemented")
}
func (UnimplementedKrkStopsServer) GetAirlyInstallation(context.Context, *GetAirlyInstallationRequest) (*Installation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirlyInstallation not implemented")
}
func (UnimplementedKrkStopsServer) GetDepartures2(context.Context, *GetDepartures2Request) (*GetDepartures2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartures2 not implemented")
}
func (UnimplementedKrkStopsServer) SearchStops2(context.Context, *SearchStops2Request) (*SearchStops2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStops2 not implemented")
}
func (UnimplementedKrkStopsServer) mustEmbedUnimplementedKrkStopsServer() {}

// UnsafeKrkStopsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KrkStopsServer will
// result in compilation errors.
type UnsafeKrkStopsServer interface {
	mustEmbedUnimplementedKrkStopsServer()
}

func RegisterKrkStopsServer(s grpc.ServiceRegistrar, srv KrkStopsServer) {
	s.RegisterService(&KrkStops_ServiceDesc, srv)
}

func _KrkStops_GetAirly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeasurementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KrkStopsServer).GetAirly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KrkStops_GetAirly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KrkStopsServer).GetAirly(ctx, req.(*GetMeasurementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KrkStops_FindNearestAirlyInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KrkStopsServer).FindNearestAirlyInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KrkStops_FindNearestAirlyInstallation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KrkStopsServer).FindNearestAirlyInstallation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _KrkStops_GetAirlyInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAirlyInstallationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KrkStopsServer).GetAirlyInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KrkStops_GetAirlyInstallation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KrkStopsServer).GetAirlyInstallation(ctx, req.(*GetAirlyInstallationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KrkStops_GetDepartures2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartures2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KrkStopsServer).GetDepartures2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KrkStops_GetDepartures2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KrkStopsServer).GetDepartures2(ctx, req.(*GetDepartures2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _KrkStops_SearchStops2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStops2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KrkStopsServer).SearchStops2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KrkStops_SearchStops2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KrkStopsServer).SearchStops2(ctx, req.(*SearchStops2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// KrkStops_ServiceDesc is the grpc.ServiceDesc for KrkStops service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KrkStops_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KrkStops",
	HandlerType: (*KrkStopsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAirly",
			Handler:    _KrkStops_GetAirly_Handler,
		},
		{
			MethodName: "FindNearestAirlyInstallation",
			Handler:    _KrkStops_FindNearestAirlyInstallation_Handler,
		},
		{
			MethodName: "GetAirlyInstallation",
			Handler:    _KrkStops_GetAirlyInstallation_Handler,
		},
		{
			MethodName: "GetDepartures2",
			Handler:    _KrkStops_GetDepartures2_Handler,
		},
		{
			MethodName: "SearchStops2",
			Handler:    _KrkStops_SearchStops2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/krk-stops.proto",
}
